# default docker image
image: node

stages:
  - build
  - test
  - deploy surge
  - deploy production
  - deploy staging

cache:
  #    using branch name as key
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

variables:
  STAGING_DOMAIN: https://staging.xiao.engineer
  PRODUCTION_DOMAIN: https://ehg.xiao.engineer

build website:
  stage: build
  script:
    - npm install
    #    - npm test
    - npm run build
    #    using stream editor to replace %%VERSION%% marker with the 8 places hash head
    #    if there are more than one occurrences, place a global flag g at the end of the regex
    - sed -i "s/%%VERSION%%/$CI_COMMIT_SHORT_SHA/" ./build/index.html
  #  save build artifacts in build directory
  artifacts:
    paths:
      - build/

test artifact:
  image: alpine
  stage: test
  script:
    #   favicon is attached by webpack
    - grep -q "icon" ./build/index.html
    #   bundle.js is attached by webpack
    - grep -q "bundle.js" ./build/index.html
#    you can potentially check last exit code by echo $?

test website:
  stage: test
  script:
    - npm install
    #    npm start alone would block CLI
    - npm run node-express &
    - sleep 3
    #    download the website
    #    - apk add --no-cache curl
    #    the following will exit 1 because curl does not mount React app
    #    - curl -s "http://localhost:9999" | tac | tac | grep -q "Image is generated by web worker."
    #    - curl -s "http://localhost:9999" | tac | tac | grep -q "$CI_COMMIT_SHORT_SHA"
    - curl -s "http://localhost:9999" | tac | tac | grep -q "root"

# deploy to surge.sh, a static website hosting service
# remember to define environment variables in GitLab settings -> CI/CD
# SURGE_LOGIN and SURGE TOKEN
# sign up by running surge from terminal
#deploy to surge:
#  stage: deploy surge
#  script:
#    - npm install -g surge
#    - surge --project ./build --domain xxx.surge.sh

# run additional acceptance/integration tests on staging server
# test external system, API compatibility etc
#deploy staging:
#  stage: deploy staging
#  environment:
#    name: staging
#    url: $STAGING_DOMAIN
#  script:
#    - npm install -g surge
#    - surge --project ./build --domain $STAGING_DOMAIN

deploy production:
  stage: deploy production
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - 'apt-get update -y && apt-get install rsync -y'
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$XIAO_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      ##
      ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
    ## following two lines.
    ##
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    # - git config --global user.email "user@example.com"
    # - git config --global user.name "User name"
  environment:
    name: production
    url: $PRODUCTION_DOMAIN
#  # add when: manual so that production doesn't happen automatically
#  # manually click start
#  when: manual
#  # allow_failure: false -> pipeline shows up as blocked instead of failed because of manual
#  allow_failure: false
  script:
    - "rsync -abvszP ./build/ root@xiao.engineer:/home/xiao/production_git/EHG-Color-Challenge/build/"
